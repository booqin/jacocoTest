plugins {
    id 'com.android.application'
    id 'jacoco'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
}

jacoco {
    toolVersion = "0.8.2"
}

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    defaultConfig {
        applicationId "com.example.jacoco"
        minSdkVersion 14
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug{
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            testCoverageEnabled = true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        abortOnError false
    }

}

//jacoco{
//    toolVersion = "0.8.4"
//    reportsDir = file("$buildDir/customJacocoReportDir")
//}

//jacocoTestReport {
//    reports {
////        xml.required = false
////        csv.required = false
////        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
//    }
//}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}

// 覆盖率的源路径
def coverageSourceDirs = ['src/main/java']
// 依赖单元测试
task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    classDirectories.from(fileTree(dir: '../app/build/intermediates/javac/debug/classes',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']))

    additionalSourceDirs.from(files(coverageSourceDirs))
    sourceDirectories.from(files(coverageSourceDirs))
    //exec数据路径，记录jacoco采集的数据
    executionData files('../app/build/jacoco/testDebugUnitTest.exec')

    reports {
        xml.enabled = true
        html.enabled = true
    }
    afterEvaluate {
        jacocoTestReport {
            classDirectories.from(files(classDirectories.files.collect {
                fileTree(dir:  "../app/build/intermediates/javac/debug/classes/com/example/jacoco",
                        exclude: [
                                '**/*$*.*',
                        ])
            }))

        }
    }
}

def javaClass = '/intermediates/javac/debug/classes/com/example/jacoco/MainActivity.class'
def kotlinClass = '/tmp/kotlin-classes/debug/com/example/jacoco/KJacocoMain.class'
// 仅生成报告
task jacocoTestReportOnly(type: JacocoReport){
    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    classDirectories.from(fileTree(dir: "$buildDir",
            includes: [javaClass, kotlinClass]))

    additionalSourceDirs.from(files(coverageSourceDirs))
    sourceDirectories.from(files(coverageSourceDirs))
    //exec数据路径，记录jacoco采集的数据
    executionData files('../app/code-coverage/coverage.ec')

    reports {
        xml.enabled = true
        html.enabled = true
    }
}

task jacocoCheck(type: JacocoCoverageVerification){

    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    classDirectories.from(fileTree(dir: "$buildDir",
            includes: [javaClass, kotlinClass]))

    additionalSourceDirs.from(files(coverageSourceDirs))
    sourceDirectories.from(files(coverageSourceDirs))
    //exec数据路径，记录jacoco采集的数据
    executionData files('../app/build/code-coverage/coverage.ec')

    violationRules {
        rule {
            limit {
                minimum = 0.99
            }
        }
    }
}
